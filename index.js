// index.js
require("dotenv").config();
const { Client, GatewayIntentBits } = require("discord.js");
const axios = require("axios");
const {post} = require("axios");

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]
});

const savedMessages = [];

client.on("messageCreate", async (message) => {
    if (message.author.bot) return;

// Commande pour l'aide
    if (message.content.startsWith("!help")) {
        const help = message.content.replace("!help", "").trim();
        if (!help) return (await message.reply("---- Liste des commandes ----\n \n" + "üèì  Ping : Pong !\n \n"
            + "üíæ  Save : Permet d'enregistrer la phrase reprise.\n \n" + "üìë  List : liste tous les messages enregistr√©s avec la commande !save.\n \n"
            + "üóëÔ∏è  delete_list : permet de supprimer tout ce qui a √©t√© sauvegard√© avec la commande save."));
    }

    // Commande pour tester la connexion du bot

    if (message.content.startsWith("!ping")) {
        const ping = message.content.replace("!ping", "").trim();
        if (!ping) return message.reply("pong !");
    }

    if (message.content.startsWith("!pong")) {
        const pong = message.content.replace("!pong", "").trim();
        if (!pong) return message.reply("ping !");
    }

    // Commande pour r√©sumer un text


    // Commande pour sauvegarder un text
    if (message.content === '!save' && message.reference) {
        try {
            // On r√©cup√®re le message auquel il a r√©pondu
            const referencedMessage = await message.channel.messages.fetch(message.reference.messageId);

            // On le stocke (ici dans un tableau, mais √ßa pourrait √™tre une base de donn√©es)
            savedMessages.push({
                content: referencedMessage.content,
                author: referencedMessage.author.tag,
                id: referencedMessage.id,
                savedBy: message.author.tag
            });

            message.reply(`üíæ Message sauvegard√© : "${referencedMessage.content}"`);
        } catch (err) {
            console.error(err);
            message.reply("‚ùå Impossible de r√©cup√©rer le message.");
        }
    }

    // Pour voir tous les messages enregistr√©s
    if (message.content === '!list') {
        if (savedMessages.length === 0) {
            message.reply("üì≠ Aucun message sauvegard√©.");
        } else {
            const list = savedMessages.map((m, i) => `${i + 1}. ${m.content} (par ${m.author})`).join("\n");
            message.reply(`üì¨ Messages sauvegard√©s :\n${list}`);
        }
    }

    if (message.content === '!delete_list') {
        const delete_list = message.content.replace("!delete_list", "").trim();
        if (!delete_list) {
            return savedMessages.length = 0,
                message.reply("üóëÔ∏è les message sauvgarder on bien √©tait supprimer");
        } else {
            return  message.reply("‚ùå Les message sauvgarder n'on pas √©tait supprimer");
        }
    }


    // Commande pour shutdown le bot

    if (message.content === '!shutdown') {
        await message.reply("üöß  Swappy s'est √©teint...  üöß");
        await client.destroy();
        process.exit(0);
        console.log("ü™´ Swappy est d√©connecter")
    }




});


client.on("ready", () => {
    console.log(`‚úÖ ${client.user.tag} est connect√© !`);
});

// Pour ce connecter au TOKEN du BOT
console.log("‚ö° Swappy d√©marre !");
client.login(process.env.DISCORD_TOKEN);

